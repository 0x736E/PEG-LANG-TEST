//
// Created by intellij-pest on 2022-11-15
// slang
// Author: seannicholls
//
WS = _{ " " | "\t" }

CODE_BLOCK_OPEN = _{
    WHITE_SPACE *
    ~ "{"
    ~
    WHITE_SPACE*
}
CODE_BLOCK_CLOSE = _{
   WHITE_SPACE *
   ~ "}"
   ~
   WHITE_SPACE*
}
CODE_BLOCK = _{
    CODE_BLOCK_OPEN
    ~
    (
        WHITE_SPACE
        |
        COMMENT
        |
        FLOW_CONTROL
        |
        VARIABLES
    )*
    ~
    CODE_BLOCK_CLOSE
}

STRING = _{ WS | '!'..'~' }
sl_comment = _{
    WS*
    ~
    "//"
    ~ STRING*
}
ml_string = _{ STRING | NEWLINE }
ml_comment_str = _{
    !"*/"
    ~
    ml_string
}
ml_comment = _{
    "/*"
    ~
    ml_comment_str*
    ~
    "*/"
}

///#888888
COMMENT = { sl_comment | ml_comment }

str_literal_enclosure = _{ "'" | "\"" | "`" }
str_literal_string = _{
    !str_literal_enclosure
    ~
    STRING
}

///#ebba34
STRINGS = {
    PUSH(str_literal_enclosure)
    ~
    (str_literal_string*)
    ~
    POP
}

///#14ace3
var_name_format = {
    ALPHABETIC+
    ~
    (ASCII_ALPHANUMERIC | "_")*
}

var_keywords = _{ "var" | "let" }

///#FF47FF
VARIABLES = {
    var_keywords
    ~
    WS+
    ~
    var_name_format
    ~
    WS+
    ~
    "="
    ~
    EXPRESSION
}


///#FF47d6
func_keyword = {
    WS*
    ~
    "function"
    ~
    WS+
}
func_name = {
    WS*
    ~
    var_name_format
    ~
    WS+
}

/// GRAY
expression_operators = { "-" | "+" | "*" | "/" }

///#03fce3
INTEGERS = { ASCII_DIGIT }

func_args = {
    WS*
    ~
    (
        var_name_format
        |
        STRINGS
        |
        INTEGERS
        |
        expression_operators
    )+
    ~
    WS*
    ~
    func_args*
 }

/// GRAY
EXPRESSION = {
    WS*
    ~
    (
        "("
        ~
        ( func_args | EXPRESSION )+
        // TODO: ACCOUNT FOR MULTIPLE ARGS WITH COMMAS
        ~
        ")"
        |
        func_args
    )+
    ~
    WS*
    ~
    (
        ";"
    )*
}

func_declaration = {
    func_keyword
    ~
    func_name
    ~
    EXPRESSION
}

FUNCTION = {
    func_declaration
    ~
    CODE_BLOCK
}


control_if = _{
    "if"
    ~
    EXPRESSION
    ~
    CODE_BLOCK
    ~
    control_else*
}

control_else = _{
   "else"
   ~
   EXPRESSION*
    ~
    CODE_BLOCK
}

///#b0b0b0
FLOW_CONTROL = {
    WHITE_SPACE*
    ~
    control_if
    ~
    WHITE_SPACE*
}

SCRIPT = {(
	WHITE_SPACE |
    VARIABLES |
    COMMENT |
    FUNCTION |
    FLOW_CONTROL
)*}